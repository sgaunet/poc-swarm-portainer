# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # Base VM OS configuration.
  config.vm.box = "centos/7"
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  #config.ssh.insert_key = false

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  config.vm.provider :virtualbox do |v|
    v.memory = 1024
    v.cpus = 2
  end

  # Define two VMs with static private IP addresses.
  boxes = [
    { :name => "n60", :ip => "192.168.56.60" },
    { :name => "n61", :ip => "192.168.56.61" },
    { :name => "n62", :ip => "192.168.56.62" }
  ]

  # Provision each of the VMs.
  boxes.each do |opts|
    config.vm.define opts[:name] do |config|
      config.vm.hostname = opts[:name]
      config.vm.network :private_network, ip: opts[:ip]

      config.vm.provision "ansible_local" do |ansible|
          ansible.playbook = "playbook.yml"
          #ansible.limit          = opts[:ip] # or only "nodes" group, etc.
          #ansible.inventory_path = "hosts"
        end
      # config.vm.provision "ansible_local" do |ansible|
      #     ansible.playbook = "playbook.yml"
      #     #ansible.limit          = opts[:ip] # or only "nodes" group, etc.
      #     #ansible.inventory_path = "hosts"
      #   end

      # Provision both VMs using Ansible after the last VM is booted.
      if opts[:name] == "n62"
       # config.vm.provision "shell", path: "script.sh"
       #config.vm.provision "ansible_local" do |ansible|
         #ansible.playbook = "playbook2.yml"
         # ansible.limit          = opts[:name] # or only "nodes" group, etc.
         #ansible.inventory_path = "hosts"
       #end
          config.vm.provision :shell, :privileged => false, :path => "go.sh"
      end
    end
  end
end
